# 🏭 Dockerfile para Producción - Dropshipping Assistant
# Optimizado para performance, seguridad y eficiencia

# Usar imagen base Alpine para menor tamaño
FROM python:3.13-slim-bullseye as base

# Variables de build
ARG BUILD_DATE
ARG VERSION
ARG REVISION

# Labels para metadatos
LABEL maintainer="Dropshipping Assistant Team"
LABEL version="${VERSION}"
LABEL description="Sistema automatizado de dropshipping con scrapers"
LABEL build-date="${BUILD_DATE}"
LABEL revision="${REVISION}"

# ===== STAGE 1: Builder =====
FROM base as builder

# Instalar dependencias de build
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libffi-dev \
    libssl-dev \
    libpq-dev \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Crear entorno virtual
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Actualizar pip
RUN pip install --upgrade pip wheel setuptools

# Copiar y instalar requirements
COPY requirements.txt /tmp/
RUN pip install --no-cache-dir -r /tmp/requirements.txt

# ===== STAGE 2: Production =====
FROM base as production

# Instalar solo dependencias de runtime
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    gettext \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copiar entorno virtual desde builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Crear usuario no-root para seguridad
RUN groupadd -r appuser && \
    useradd -r -g appuser -d /app -s /bin/bash appuser

# Crear directorios necesarios
RUN mkdir -p /app /app/logs /app/media /app/static /app/backups && \
    chown -R appuser:appuser /app

# Establecer directorio de trabajo
WORKDIR /app

# Copiar código de la aplicación
COPY --chown=appuser:appuser . .

# Configurar permisos
RUN chmod +x manage.py && \
    chmod +x deploy_production.py && \
    chmod +x monitor_production.py && \
    chmod +x backup_production.py

# Cambiar a usuario no-root
USER appuser

# Variables de entorno de producción
ENV DJANGO_SETTINGS_MODULE=dropship_bot.settings
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONHASHSEED=random
ENV PYTHONOPTIMIZE=1

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health/ || exit 1

# Exponer puerto
EXPOSE 8000

# Script de entrada
COPY --chown=appuser:appuser docker-entrypoint.sh /app/
RUN chmod +x docker-entrypoint.sh

# Comando por defecto para producción
ENTRYPOINT ["/app/docker-entrypoint.sh"]
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "--timeout", "120", "--max-requests", "1000", "--max-requests-jitter", "100", "dropship_bot.wsgi:application"]