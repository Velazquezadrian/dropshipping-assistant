#!/usr/bin/env python3
"""
üîç VERIFICACI√ìN COMPLETA: ¬øEL BOT DA LINKS REALES?
Prueba exhaustiva del bot para confirmar que devuelve productos reales de internet
"""

import os
import sys
import django
import requests
import time
from datetime import datetime

# Configurar Django
sys.path.append(r'C:\Dropshiping')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dropship_bot.settings')
django.setup()

from products.services.bot_scraper import filter_aliexpress_products

def verificar_url_es_real(url, timeout=10):
    """Verifica si una URL es accesible y contiene un producto real"""
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
    }
    
    try:
        print(f"  üîç Verificando: {url}")
        response = requests.get(url, headers=headers, timeout=timeout, allow_redirects=True)
        
        # Verificar que no sea p√°gina de error
        if response.status_code == 200:
            content = response.text.lower()
            
            # Verificar que NO sea p√°gina de error 404
            if 'error/404' in response.url or '404' in content[:1000]:
                return False, "Redirige a p√°gina 404"
            
            # Verificar que contenga elementos t√≠picos de producto
            product_indicators = [
                'price', 'buy', 'cart', 'product', 'item', 
                'aliexpress', 'seller', 'shipping', 'review'
            ]
            
            found_indicators = sum(1 for indicator in product_indicators if indicator in content)
            
            if found_indicators >= 3:
                return True, f"P√°gina v√°lida con {found_indicators} indicadores de producto"
            else:
                return False, f"Solo {found_indicators} indicadores encontrados"
        else:
            return False, f"HTTP {response.status_code}"
            
    except Exception as e:
        return False, f"Error: {str(e)}"

def test_bot_productos_reales():
    """Prueba si el bot devuelve productos con URLs reales"""
    print("ü§ñ PROBANDO BOT CON VERIFICACI√ìN DE URLs REALES")
    print("=" * 60)
    
    # Test 1: Mouse baratos
    print("\nüìù Test 1: 'Busca mouse que cuesten menos de $15'")
    productos = filter_aliexpress_products(
        product_name="mouse",
        max_price=15.0,
        max_results=5
    )
    
    print(f"‚úÖ Bot encontr√≥: {len(productos)} productos")
    
    urls_validas = 0
    urls_invalidas = 0
    
    for i, producto in enumerate(productos, 1):
        print(f"\n  {i}. {producto['title'][:50]}...")
        print(f"     üí∞ ${producto['price']} | ‚≠ê {producto['rating']} | üöö {producto['shipping_time']} d√≠as")
        
        # Verificar si el URL es real
        es_real, motivo = verificar_url_es_real(producto['url'])
        
        if es_real:
            print(f"     ‚úÖ URL REAL: {producto['url']}")
            print(f"     ‚úÖ {motivo}")
            urls_validas += 1
        else:
            print(f"     ‚ùå URL INV√ÅLIDA: {producto['url']}")
            print(f"     ‚ùå {motivo}")
            urls_invalidas += 1
        
        time.sleep(1)  # Pausa para no sobrecargar
    
    print(f"\nüìä RESULTADO TEST 1:")
    print(f"‚úÖ URLs v√°lidas: {urls_validas}")
    print(f"‚ùå URLs inv√°lidas: {urls_invalidas}")
    print(f"üìà Tasa de √©xito: {(urls_validas / len(productos) * 100):.1f}%")
    
    return urls_validas, urls_invalidas

def test_diferentes_productos():
    """Prueba con diferentes tipos de productos"""
    print(f"\nüîÑ PROBANDO DIFERENTES PRODUCTOS")
    print("=" * 50)
    
    productos_test = [
        {"name": "keyboard", "max_price": 20, "descripcion": "Teclados baratos"},
        {"name": "headphones", "max_price": 25, "descripcion": "Auriculares econ√≥micos"},
        {"name": "cable usb", "max_price": 5, "descripcion": "Cables USB baratos"}
    ]
    
    total_validas = 0
    total_invalidas = 0
    
    for test in productos_test:
        print(f"\nüìÇ Probando: {test['descripcion']}")
        
        productos = filter_aliexpress_products(
            product_name=test["name"],
            max_price=test["max_price"],
            max_results=3
        )
        
        print(f"   üì¶ Encontrados: {len(productos)} productos")
        
        for i, producto in enumerate(productos, 1):
            print(f"   {i}. {producto['title'][:40]}... - ${producto['price']}")
            
            # Verificaci√≥n r√°pida de URL
            es_real, _ = verificar_url_es_real(producto['url'], timeout=5)
            
            if es_real:
                print(f"      ‚úÖ URL real")
                total_validas += 1
            else:
                print(f"      ‚ùå URL inv√°lida")
                total_invalidas += 1
    
    print(f"\nüìä RESULTADO GENERAL:")
    print(f"‚úÖ Total URLs v√°lidas: {total_validas}")
    print(f"‚ùå Total URLs inv√°lidas: {total_invalidas}")
    
    return total_validas, total_invalidas

def test_scraping_real_aliexpress():
    """Intenta hacer scraping real de AliExpress"""
    print(f"\nüåê PROBANDO SCRAPING REAL DE ALIEXPRESS")
    print("=" * 50)
    
    from products.services.bot_scraper import AliExpressBot
    
    bot = AliExpressBot()
    
    # Intentar b√∫squeda real
    print("üîç Intentando b√∫squeda real en AliExpress...")
    
    try:
        # Usar el m√©todo interno de b√∫squeda
        productos_raw = bot._search_aliexpress("mouse", 5)
        
        print(f"üì¶ Scraping devolvi√≥: {len(productos_raw)} productos")
        
        if productos_raw:
            print("‚úÖ ¬°El bot S√ç puede extraer productos!")
            
            for i, producto in enumerate(productos_raw[:3], 1):
                print(f"  {i}. {producto['title'][:50]}...")
                print(f"     üí∞ ${producto['price']} | üîó {producto['url']}")
                
                # Verificar URL
                es_real, motivo = verificar_url_es_real(producto['url'], timeout=5)
                print(f"     {'‚úÖ' if es_real else '‚ùå'} {motivo}")
        else:
            print("‚ö†Ô∏è  Scraping real fall√≥, usando productos simulados")
            
    except Exception as e:
        print(f"‚ùå Error en scraping real: {e}")

def main():
    print("üöÄ VERIFICACI√ìN EXHAUSTIVA DEL BOT")
    print("=" * 70)
    print(f"üïí Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("üéØ Objetivo: Verificar que el bot devuelve URLs REALES de productos")
    
    # Test 1: Productos principales
    validas1, invalidas1 = test_bot_productos_reales()
    
    # Test 2: Diferentes productos
    validas2, invalidas2 = test_diferentes_productos()
    
    # Test 3: Scraping real
    test_scraping_real_aliexpress()
    
    # Resultado final
    total_validas = validas1 + validas2
    total_invalidas = invalidas1 + invalidas2
    total_productos = total_validas + total_invalidas
    
    print(f"\nüèÜ CONCLUSI√ìN FINAL:")
    print(f"üì¶ Total productos probados: {total_productos}")
    print(f"‚úÖ URLs v√°lidas: {total_validas}")
    print(f"‚ùå URLs inv√°lidas: {total_invalidas}")
    
    if total_productos > 0:
        tasa_exito = (total_validas / total_productos) * 100
        print(f"üìà Tasa de √©xito: {tasa_exito:.1f}%")
        
        if tasa_exito >= 80:
            print("üéâ ¬°EXCELENTE! El bot devuelve URLs reales de productos")
        elif tasa_exito >= 50:
            print("‚úÖ BUENO: La mayor√≠a de URLs son v√°lidas")
        else:
            print("‚ö†Ô∏è  NECESITA MEJORAS: Muchas URLs no son v√°lidas")
    
    print(f"\nüåê Para probar manualmente:")
    print(f"1. Ir a: http://localhost:8000/filter/")
    print(f"2. Buscar: 'mouse', precio m√°ximo: '10'")
    print(f"3. Verificar que los links funcionen en el navegador")

if __name__ == "__main__":
    main()