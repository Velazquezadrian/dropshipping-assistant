# 🐳 Docker Compose - Dropshipping Assistant
# Para ejecutar: docker-compose up -d

version: '3.8'

services:
  # Aplicación Django
  app:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data  # Persiste la base de datos SQLite
      - ./logs:/app/logs  # Persiste los logs
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-in-production}
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID:-}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL:-}
    depends_on:
      - db
    restart: unless-stopped

  # Base de datos PostgreSQL (opcional para producción)
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-dropship_bot}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Nginx (para producción)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./static:/app/static:ro
    depends_on:
      - app
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

# Configuración de red
networks:
  default:
    driver: bridge